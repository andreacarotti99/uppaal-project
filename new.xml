<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/**********************************************************************************************
/******************************* GLOBAL VARIABLES *********************************************
/**********************************************************************************************/
clock general_clock;

chan enter, free_truck, start, wait;
/*
channel declared urgent to inizialize every element of the system in the same moment
*/
urgent broadcast chan initialization;

/*
first element is the distance in km from station 1 to station 2, 
second element is the distance in km from station 2 to station 3
EXPRESSED IN UNITS
*/
int lineDistance[2] = {23, 35};

/*
first element is the max time needed to get from station 1 to 2
second element is the max time needed to get from station 2 to 3
EXPRESSED IN CLOCKS
*/
int lineMaxDelay[2] = {20, 30};

/*
this is a sort of map: it provides information of where are currently the trains,
the train is the INDEX so if for example Train(1) is at station 1, Train(2) is at
station 3, and Train(3) is at station 2 is initialized like this:
int whereIsTrain[3] = {1, 3, 2};
*/
int trainActualStation[3] = {1,1,1};

/*
same as above, but maps the next station for each train
*/
int trainNextStation[3] = {2,2,2};

/*
this provides info on whether the station INDEX is free or not
*/
bool stationAvailableToReceiveTrains[3] = {true,true,true};

/*
number of available trucks free in the INDEX station
*/
int stationAvailableTrucks[3] = {0,1,2};

/*
number of total trucks free in the INDEX station
*/
int stationNumberOfTrucks[3] = {3,1,2};

/*
charges of train, first element charge of Train(1), second element charge of Train(2) and third element charge of Train(3)
*/
int trainActualCharge[3] = {100,5,100};

/*
this is the max charge of train INDEX
*/
int trainMaxCharge[3] = {100,100,100};


/*
based on the policy that we will decide, this will be accessed by the Train(i) to check whether can go to the next station, and
will be edited by the station that decides who can leave and who cannot
*/
bool trainCanLeaveActualStation[3] = {false,false,false};

/*
velocity of Train(i)
EXPRESSED in UNITS/CLOCK
*/
int trainVelocity[3] = {10,10,10};

/*
vector useful to know if a train is going forward or backward: 0-&gt;1-&gt;2
*/
bool trainGoingForward[3] = {true, true, true};

/*
vector used to check if a train is waiting for a station to let it in
*/
bool trainIsWaiting[3] = { false, false, false };

/*
current distance of each train to reach the next station -- Expressed in UNITS
*/
int trainDistanceToNextStation[3] = { 23, 23, 23 };

/*
current time left of each train to reach the next station -- Expressed in CLOCKs
*/
int trainTimeLeft[3] = { 20, 20, 20 };


/**********************************************************************************************
/******************************* GLOBAL FUNCTIONS *********************************************
/**********************************************************************************************/

/*
this function is to initialize everything, right now all the parameters are hard-coded 
*/
void initialize_all(){
}

/*
function used to update the next station of each train
*/
void updateNextStation(int trainId) {
    if( trainGoingForward[trainId] ) {
        if(trainActualStation[trainId] &lt; 3 )
            trainNextStation[trainId] += 1;
        else{
            trainGoingForward[trainId] = false; //end of line reached! change direction
            trainNextStation[trainId] -= 1;
        }
    }
    else{
        if(trainActualStation[trainId] &gt; 0)
            trainNextStation[trainId] -= 1;
        else {
            trainGoingForward[trainId] = true;    //first station of line reached! change direction
            trainNextStation[trainId] += 1;
        }
    }
}

/*
update the maximum time a train can take to get to the following station
*/
void updateNextTime(int TrainNumber) {
    int index;
    if ( trainActualStation[TrainNumber] &lt; trainNextStation[TrainNumber] ) {
        index = trainActualStation[TrainNumber];
        trainTimeLeft[TrainNumber] = lineMaxDelay[index];
    }
    else {
        index = trainNextStation[TrainNumber];
        trainTimeLeft[TrainNumber] = lineMaxDelay[index];
    }
}




</declaration>
	<template>
		<name>Line</name>
		<parameter>int LineNumber</parameter>
		<declaration>// Line Clocks

// Line Variables
/*
typedef struct{
    int distance[2];    //distance (in km) between each pair of consecutive stations
    int max_delay[2];    //maximum time to reach the following station: associated to each pair of consecutive stations
}line;
*/

// Line Functions 
</declaration>
		<location id="id0" x="-391" y="-255">
			<name x="-416" y="-289">working</name>
		</location>
		<location id="id1" x="-604" y="-255">
			<name x="-620" y="-289">initial</name>
			<committed/>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-552" y="-272">initialization!</label>
			<label kind="assignment" x="-544" y="-246">initialize_all()</label>
			<nail x="-425" y="-255"/>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>int StationNumber</parameter>
		<declaration>// Station Clocks

// Station Variables
/*
typedef struct{
    int trucks;
    int availableTrucks;
}station;

station s;
*/

bool letIn = false;


// Station Functions
void addAvlTrucks(int i) {
   stationAvailableTrucks[StationNumber] += (i);
}

//function to be modified...
void decideWhoCanLeaveActualStation(){
    trainCanLeaveActualStation[2] = true;
}

/*
function to check if a train is waiting for a specific station
---in this way we do not give any priority to the trains ...
*/
void checkTrainArrived(){
    int i;
    for (i=0; i&lt;3; i++){
        if(trainIsWaiting[i])
            if(StationNumber == trainNextStation[i])
                letIn = true;
    }
}

//function to upload the letIn variable
void updateLetIn(bool val){
    letIn = val;
}

//TO BE DELETED: we just need to check if a train is waiting and do not need to know the INDEX (?)

/*
//variable used to check if the station should let a train in
bool letIn[3] = {false, false, false};
//function to check if one or more trains are waiting outside of a specific station
void checkTrainArrived(){
    int i;
    for (i=0; i&lt;3; i++){
        if(trainIsWaiting[i])
            if(StationNumber == trainNextStation[i])
                letIn[i] = true;
    }
}
*/





</declaration>
		<location id="id2" x="-1309" y="-612">
			<name x="-1470" y="-620">waiting_for_trains</name>
		</location>
		<location id="id3" x="-833" y="-399">
			<name x="-816" y="-382">fully_occupied</name>
		</location>
		<location id="id4" x="-833" y="-612">
			<name x="-843" y="-646">idle</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="assignment" x="-1640" y="-620">checkTrainArrived()</label>
			<nail x="-1496" y="-561"/>
			<nail x="-1496" y="-663"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-816" y="-365">wait!</label>
			<nail x="-833" y="-297"/>
			<nail x="-680" y="-297"/>
			<nail x="-680" y="-399"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-824" y="-527">stationAvailableTrucks[StationNumber] == 0</label>
			<label kind="synchronisation" x="-824" y="-544">initialization?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-1224" y="-646">stationAvailableTrucks[StationNumber] &gt; 0</label>
			<label kind="synchronisation" x="-1011" y="-671">initialization?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-1496" y="-799">stationAvailableTrucks[StationNumber] &gt;1
and letIn</label>
			<label kind="synchronisation" x="-1496" y="-765">enter!</label>
			<label kind="assignment" x="-1496" y="-748">addAvlTrucks(-1), updateLetIn(false)</label>
			<nail x="-1309" y="-723"/>
			<nail x="-1496" y="-722"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1479" y="-476">free_truck?</label>
			<label kind="assignment" x="-1479" y="-459">addAvlTrucks(1)</label>
			<nail x="-1309" y="-485"/>
			<nail x="-1487" y="-484"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1070" y="-536">free_truck?</label>
			<label kind="assignment" x="-1088" y="-552">addAvlTrucks(1)</label>
			<nail x="-1071" y="-510"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-1232" y="-365">stationAvailableTrucks[StationNumber] ==1 and letIn</label>
			<label kind="synchronisation" x="-1081" y="-398">enter!</label>
			<label kind="assignment" x="-1173" y="-382">addAvlTrucks(-1), updateLetIn(false)</label>
			<nail x="-1309" y="-399"/>
		</transition>
	</template>
	<template>
		<name>Train</name>
		<parameter>int TrainNumber</parameter>
		<declaration>// Train Clocks
clock trainClock; 
clock timeTraveling; //must be reset as soon as a train leaves a station

// Train Functions
void recharge(){
    if( trainActualCharge[TrainNumber] &lt; trainMaxCharge[TrainNumber] + 1 )
        trainActualCharge[TrainNumber] += 1;
}
/*
function to update the charge of a train -- policy needed
*/
void loose_charge(){
    if( (trainActualCharge[TrainNumber] - 1) &gt;= 0 )
        trainActualCharge[TrainNumber] -= 1;
}

/*
function to update the distance to the next station -- policy needed
*/
void update_distance (){
    trainDistanceToNextStation[TrainNumber] -= trainVelocity[TrainNumber];
}

/*
function to update the time left ti reach the next station -- policy needed
*/
void updateTimeLeft (){
    trainTimeLeft[TrainNumber] -= 1;
}

/*
naive implementation of policy to let a train leave the station
*/
void updateIfTrainCanLeave(){
    if(trainActualCharge[TrainNumber] &gt;= trainDistanceToNextStation[TrainNumber]){
        trainCanLeaveActualStation[TrainNumber] = true;
        trainActualStation[TrainNumber] = trainNextStation[TrainNumber];
        updateNextStation(TrainNumber);
        updateNextTime(TrainNumber);
    }
    else {
        trainCanLeaveActualStation[TrainNumber] = false;
    }
}</declaration>
		<location id="id5" x="-1130" y="-841">
			<name x="-1164" y="-867">idle</name>
		</location>
		<location id="id6" x="-1130" y="-637">
			<name x="-1275" y="-662">waiting_in_a_station</name>
		</location>
		<location id="id7" x="-510" y="-637">
			<name x="-510" y="-671">traveling</name>
		</location>
		<location id="id8" x="-1615" y="-637">
			<name x="-1742" y="-620">waiting_outside_a_station</name>
		</location>
		<location id="id9" x="-1130" y="-263">
			<name x="-1164" y="-246">out_of_power</name>
		</location>
		<location id="id10" x="-1130" y="-365">
			<name x="-1172" y="-348">out_of_time</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="guard" x="-1054" y="-391">trainTimeLeft[TrainNumber]==0</label>
			<nail x="-637" y="-365"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="guard" x="-1394" y="-391">trainTimeLeft[TrainNumber]==0</label>
			<nail x="-1462" y="-365"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1173" y="-765">initialization?</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="assignment" x="-1751" y="-756">loose_charge()</label>
			<nail x="-1751" y="-637"/>
			<nail x="-1751" y="-739"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-476" y="-611">trainDistanceToNextStation[TrainNumber] &gt; 0</label>
			<label kind="assignment" x="-433" y="-645">loose_charge(), update_distance(),
updateTimeLeft()</label>
			<nail x="-442" y="-552"/>
			<nail x="-442" y="-637"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="assignment" x="-1257" y="-568">recharge(), updateIfTrainCanLeave()</label>
			<nail x="-960" y="-543"/>
			<nail x="-1300" y="-543"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-1530" y="-289">trainActualCharge[TrainNumber]==0</label>
			<nail x="-1615" y="-263"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="guard" x="-943" y="-289">trainActualCharge[TrainNumber]==0</label>
			<nail x="-510" y="-263"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-977" y="-782">trainDistanceToNextStation[TrainNumber] == 0
and trainTimeLeft[TrainNumber] &gt; 0</label>
			<label kind="synchronisation" x="-858" y="-807">enter?</label>
			<nail x="-595" y="-748"/>
			<nail x="-1020" y="-748"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="guard" x="-1521" y="-663">trainTimeLeft[TrainNumber] &gt; 0</label>
			<label kind="synchronisation" x="-1428" y="-680">enter?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-1266" y="-501">trainDistanceToNextStation[TrainNumber] == 0
and trainTimeLeft[TrainNumber] &gt; 0</label>
			<label kind="synchronisation" x="-1096" y="-518">wait?</label>
			<nail x="-680" y="-484"/>
			<nail x="-1428" y="-484"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-994" y="-637">trainCanLeaveActualStation[TrainNumber]</label>
			<label kind="synchronisation" x="-867" y="-654">free_truck!</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
l = Line(0);
s1 = Station(0);
s2 = Station(1);
s3 = Station(2);
t1 = Train(0);
t2 = Train(1);
t3 = Train(2);
// List one or more processes to be composed into a system.
system l, s1, s2, s3, t1, t2, t3;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
